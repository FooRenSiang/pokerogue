#src/mods.ts
+  public regenPokeChance: number = 0;

  public maxLuck: boolean = false; //RIze2kNight

#src/system/settings/mod-settings.ts
+  REGEN_POKEMON: "REGEN_POKEMON", //Done

  MAX_LUCK: "MAX_LUCK", //RIze2kNight Mod

#src/system/settings/mod-settings.ts
+export const ModSetting: Array<Setting> = [
  {
    key: SettingKeys.MAX_LUCK,
    label: "Max Luck",
    options: OFF_ON,
    default: 0,
    type: null
  },

#src/system/settings/mod-settings.ts
+  case SettingKeys.REGEN_POKEMON:
+    scene.mods.regenPokeChance = parseInt(ModSetting[index].options[value].value);
+    break;

  //RIze2kNight Mod
  case SettingKeys.MAX_LUCK:
    scene.mods.maxLuck = ModSetting[index].options[value].value === "On";
    break;

#src/modifier/modifier-type.ts
-export function getPartyLuckValue(party: Pokemon[]): integer {
-  const luck = Phaser.Math.Clamp(party.map(p => p.isFainted() ? 0 : p.getLuck())
-    .reduce((total: integer, value: integer) => total += value, 0), 0, 14);
export function getPartyLuckValue(party: Pokemon[]): integer {

  // RIze2kNight Modded
  let luck = Phaser.Math.Clamp(party.map(p => p.isFainted() ? 0 : p.getLuck())
    .reduce((total: integer, value: integer) => total += value, 0), 0, 14);
  luck = party[0].scene.mods.maxLuck? 14 : luck;
